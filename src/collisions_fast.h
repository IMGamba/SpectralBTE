/************************************************

collisions.h - contains frontend for evaluating the collision operator. 

Requires weights generated by weights.h

Requires linking of conserve.h

Requires linking of momentRoutines.h

**************************************************/

#ifndef _COLLISIONS_H
#define _COLLISIONS_H
#include <fftw3.h>

/*******************
function initialize_coll
Initializes the collision routine parameters and allocates needed memory
==============
Inputs:
modes: number of velocity nodes in each direction
length: semi-length size of computational domain: [-L,L]
vel: vector of the velocity grid points
zeta: vector of the fourier space grid pts
********************/
void initialize_coll(int modes, double length, double *vel, double *M, double *zeta, double lam);


/********************
function collision
Evaluates the collision operator with conservation for a given distribution function and weights
Inputs:
f: velocity distribution function, assumed to be N*N*N 
Q: pointer to output of the collision operator, to be used in updating f externally
conv_weights: pointer to N^6 array of convolution weights generated externally by weight module
*********************/

void collision(double *f, double *Q);


/*********************
function dealloc_coll
deallocates all dynamically allocated memory for the collisions module
 ********************/
void dealloc_coll();


//Internal routines

void ComputeQ(double *f, double *Q);

void fft3D(fftw_complex *in, fftw_complex *out);

void ifft3D(fftw_complex *in, fftw_complex *out);



#endif
