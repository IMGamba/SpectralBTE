#!/bin/bash

#log path - should be consistent with other scripts
LOGS_REF=refs/notes/productivity
LOG=.commit.log

#only log anything if commit-msg already set up the log file
if [ -f "$LOG" ]; then
	#mark start of git info
	printf '{"git_info":\n' >> $LOG

	#record the commit hash
	CUR_HASH=$(git rev-parse HEAD)
	printf '\t{"commit_hash":%s},\n' $CUR_HASH >> $LOG

	#record the current branch
	CUR_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	printf '\t{"branch":%s}\n' "$CUR_BRANCH" >> $LOG

	#mark end of git info
	printf '}\n' >> $LOG

	#make sure that the logs will be properly conncatenated during a rebase
	#by adding LOGS_REF to notes.rewriteRef, if it isn't already in it
	REWRITE_REF=$(git config --get notes.rewriteRef)
	if [[ ! ",$LOGS_REF," = *",$REWRITE_REF,"* ]]; then
		git config notes.rewriteRef $REWRITE_REF,$LOGS_REF
	fi

	#save log as a git note
	git notes --ref $LOGS_REF \
	add -F $LOG \
	-m "productivity log for commit $CUR_HASH in branch $CUR_BRANCH" \

	#delete log file, now that it has been saved as a git note
	rm $LOG
fi
